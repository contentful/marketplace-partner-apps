// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl:
    | 'https://api.markup.ai'
    | 'https://api.stg.markup.ai'
    | 'https://api.dev.markup.ai'
    | 'http://localhost:8000'
    | (string & {});
};

/**
 * AccountMetadata
 */
export type AccountMetadata = {
  /**
   * First Name
   */
  first_name: string;
  /**
   * Last Name
   */
  last_name: string;
  /**
   * Job Title
   */
  job_title: string;
  /**
   * User Role
   */
  user_role: string;
  /**
   * Marketing Consent
   */
  marketing_consent: boolean;
};

/**
 * AccountResponse
 */
export type AccountResponse = {
  organization: OrganizationResponseFull;
  user_profile: HeliosOneApiSchemasSharedUserProfileResponse;
};

/**
 * Analysis
 */
export type Analysis = {
  /**
   * Clarity Score
   */
  clarity_score?: number | null;
  /**
   * Word Count
   */
  word_count?: number | null;
  /**
   * Sentence Count
   */
  sentence_count?: number | null;
  /**
   * Avg Word Length
   */
  avg_word_length?: number | null;
  /**
   * Avg Sentence Length
   */
  avg_sentence_length?: number | null;
  /**
   * Flesch Reading Ease
   */
  flesch_reading_ease?: number | null;
  /**
   * Flesch Kincaid Grade
   */
  flesch_kincaid_grade?: number | null;
  /**
   * Lexical Diversity
   */
  lexical_diversity?: number | null;
  /**
   * Vocabulary Complexity
   */
  vocabulary_complexity?: number | null;
  /**
   * Sentence Complexity
   */
  sentence_complexity?: number | null;
  /**
   * Estimated Reading Time
   */
  estimated_reading_time?: number | null;
  /**
   * Tone Score
   */
  tone_score?: number | null;
  /**
   * Informality Score
   */
  informality_score?: number | null;
  /**
   * Liveliness Score
   */
  liveliness_score?: number | null;
  /**
   * Informality Alignment
   */
  informality_alignment?: number | null;
  /**
   * Liveliness Alignment
   */
  liveliness_alignment?: number | null;
  /**
   * Target Informality
   */
  target_informality?: number | null;
  /**
   * Target Liveliness
   */
  target_liveliness?: number | null;
  /**
   * Informality Tolerance
   */
  informality_tolerance?: number | null;
  /**
   * Liveliness Tolerance
   */
  liveliness_tolerance?: number | null;
};

/**
 * AnalysisScore
 */
export type AnalysisScore = {
  clarity?: ClarityScore | null;
  tone?: ToneScore | null;
};

/**
 * ApiKeyRequest
 */
export type ApiKeyRequest = {
  /**
   * Name
   */
  name: string;
};

/**
 * ApiKeyResponse
 */
export type ApiKeyResponse = {
  /**
   * Name
   */
  name: string;
  /**
   * Truncated
   */
  truncated: string;
  /**
   * Expiry
   */
  expiry: string | null;
  /**
   * Created By
   */
  created_by: string | null;
};

/**
 * ApiKeyResponseFull
 */
export type ApiKeyResponseFull = {
  /**
   * Name
   */
  name: string;
  /**
   * Truncated
   */
  truncated: string;
  /**
   * Expiry
   */
  expiry: string | null;
  /**
   * Created By
   */
  created_by: string | null;
  /**
   * Key
   */
  key: string;
};

/**
 * AuthResponse
 */
export type AuthResponse = {
  /**
   * Api Key Id
   * Contains the ID of the API key within our api_keys table
   */
  api_key_id?: string | null;
  /**
   * Email
   * Contains the email of the user who signed in with the API key
   */
  email?: string | null;
  /**
   * Id
   * Contains the source prefix and truncated key of the API key used to authenticate the user. Example: key|1234567890
   */
  id: string;
  /**
   * Org Id
   * Contains the ID of the organization to which the user belongs
   */
  org_id: string;
  /**
   * Org Name
   * Contains the name of the organization to which the user belongs
   */
  org_name: string;
  /**
   * Permissions
   * Contains the permissions assigned to the API key
   */
  permissions: Array<string>;
  /**
   * Tokens Used
   * Number of tokens the organization has used
   */
  tokens_used?: number | null;
  /**
   * Token Limit
   * Maximum number of tokens the organization can use
   */
  token_limit?: number | null;
};

/**
 * AvailableStyleGuides
 */
export enum AvailableStyleGuides {
  AP = 'ap',
  CHICAGO = 'chicago',
  MICROSOFT = 'microsoft',
}

/**
 * Body_Demo Tool-submit_edit_workflow
 */
export type BodyDemoToolSubmitEditWorkflow = {
  /**
   * File
   * The .txt file to process.
   */
  file?: Blob | File | null;
  /**
   * The intended dialect of the text to edit.
   */
  dialect?: Dialects;
  /**
   * The intended tone of the text to edit.
   */
  tone?: Tones;
  /**
   * The intended style guide to use for the text to edit.
   */
  style_guide?: AvailableStyleGuides;
  /**
   * Url
   * The URL to scrape.
   */
  url?: string;
};

/**
 * Body_Style Guides-update_style_guide
 */
export type BodyStyleGuidesUpdateStyleGuide = {
  /**
   * Name
   * The name of the style guide.
   */
  name: string;
};

/**
 * Body_Term Import/Export-import_actif_terms
 */
export type BodyTermImportExportImportActifTerms = {
  /**
   * File
   * ACTIF XML file containing terminology data
   */
  file: Blob | File;
};

/**
 * Body_Term Import/Export-import_csv_terms
 */
export type BodyTermImportExportImportCsvTerms = {
  /**
   * File
   * CSV file containing terminology data
   */
  file: Blob | File;
};

/**
 * ClarityCategory
 */
export enum ClarityCategory {
  SIMPLER_WORDS = 'Simpler Words',
  COMPLEX_VERB_TENSES = 'Complex Verb Tenses',
  HIDDEN_VERBS = 'Hidden Verbs',
  DIRECT_STATEMENTS = 'Direct Statements',
  PASSIVE_VOICE = 'Passive Voice',
  PHRASAL_VERBS = 'Phrasal Verbs',
  FORMAL_GRAMMAR_FORMS = 'Formal Grammar Forms',
  UNNECESSARY_WORDS = 'Unnecessary Words',
  SENTENCE_SPLITTING = 'Sentence Splitting',
  CONCISE_WORDING = 'Concise Wording',
}

/**
 * ClarityScore
 */
export type ClarityScore = {
  /**
   * Score
   */
  score?: number | null;
  /**
   * Flesch Reading Ease
   */
  flesch_reading_ease?: number | null;
  /**
   * Sentence Complexity
   */
  sentence_complexity?: number | null;
  /**
   * Vocabulary Complexity
   */
  vocabulary_complexity?: number | null;
  /**
   * Sentence Count
   */
  sentence_count?: number | null;
  /**
   * Word Count
   */
  word_count?: number | null;
  /**
   * Average Sentence Length
   */
  average_sentence_length?: number | null;
};

/**
 * Color
 */
export type Color = {
  /**
   * Value
   */
  value: string;
  /**
   * Min Score
   */
  min_score: number;
};

/**
 * ConceptCreateRequest
 * Payload to create a new concept
 */
export type ConceptCreateRequest = {
  /**
   * Guidance
   */
  guidance: string;
};

/**
 * ConceptResponse
 * DB-mapped representation of a concept (no terms).
 */
export type ConceptResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Guidance
   */
  guidance: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Created By
   */
  created_by?: string | null;
  /**
   * Updated By
   */
  updated_by?: string | null;
};

/**
 * ConceptResult
 */
export type ConceptResult = {
  /**
   * Guidance
   */
  guidance: string;
  /**
   * Terms
   */
  terms: Array<TermItem>;
  /**
   * Matched Terms
   */
  matched_terms: Array<MatchedTerm>;
};

/**
 * ConceptUpdateRequest
 * Payload to update an existing concept
 */
export type ConceptUpdateRequest = {
  /**
   * Guidance
   */
  guidance: string;
};

/**
 * ConceptWithTerms
 * Concept with all associated terms for term management UI
 */
export type ConceptWithTerms = {
  /**
   * Id
   */
  id: string;
  /**
   * Guidance
   */
  guidance: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Created By
   */
  created_by?: string | null;
  /**
   * Updated By
   */
  updated_by?: string | null;
  /**
   * Terms
   */
  terms: Array<TermDetail>;
};

/**
 * ConfigOptions
 */
export type ConfigOptions = {
  dialect?: Dialects | null;
  style_guide?: StyleGuide | null;
  tone?: Tones | null;
};

/**
 * ConsistencyCategory
 */
export enum ConsistencyCategory {
  CONSISTENT_PUNCTUATION = 'Consistent Punctuation',
  CONSISTENT_CAPITALIZATION = 'Consistent Capitalization',
  PREFERRED_SPELLING_AND_GRAMMAR = 'Preferred Spelling and Grammar',
  'NUMBERS,_DATES,_AND_TIMES' = 'Numbers, Dates, and Times',
  INCLUSIVE_LANGUAGE = 'Inclusive Language',
  BRAND_VOICE = 'Brand Voice',
  SPECIAL_STYLE_GUIDE_REQUIREMENTS = 'Special Style Guide Requirements',
  CLARITY_AND_READABILITY = 'Clarity and Readability',
  OTHER = 'other',
}

/**
 * ConsistencyScore
 */
export type ConsistencyScore = {
  /**
   * Score
   */
  score?: number | null;
  /**
   * Issues
   */
  issues?: number | null;
};

/**
 * ConstantsResponse
 */
export type ConstantsResponse = {
  /**
   * Dialects
   */
  dialects?: Array<Dialects>;
  /**
   * Tones
   */
  tones?: Array<Tones>;
  /**
   * Style Guides
   */
  style_guides?: {
    [key: string]: string;
  };
  /**
   * Colors
   */
  colors?: {
    [key: string]: Color;
  };
};

/**
 * ContentMetrics
 */
export type ContentMetrics = {
  /**
   * Text Statistics Counts
   * Chunk-level counts needed to calculate text statistics
   */
  text_statistics_counts?: {
    [key: string]: number;
  };
  /**
   * Clarity Counts
   * Chunk-level counts needed to calculate clarity scores
   */
  clarity_counts?: {
    [key: string]: number;
  };
  /**
   * Informality Counts
   * Chunk-level counts needed to calculate informality scores
   */
  informality_counts?: {
    [key: string]: number;
  };
  /**
   * Liveliness Counts
   * Chunk-level counts needed to calculate liveliness scores
   */
  liveliness_counts?: {
    [key: string]: number;
  };
};

/**
 * ContentQualityFeedback
 */
export enum ContentQualityFeedback {
  'EXCELLENT_CONTENT_QUALITY!_YOUR_TEXT_IS_CLEAR,_READABLE,_AND_WELL_STRUCTURED' = 'Excellent content quality! Your text is clear, readable, and well-structured.',
  GOOD_CONTENT_QUALITY_YOUR_TEXT_IS_READABLE_BUT_HAS_ROOM_FOR_IMPROVEMENT = 'Good content quality. Your text is readable but has room for improvement.',
  MODERATE_CONTENT_QUALITY_CONSIDER_REVISING_FOR_BETTER_READABILITY = 'Moderate content quality. Consider revising for better readability.',
  LOW_CONTENT_QUALITY_THE_TEXT_NEEDS_SIGNIFICANT_REVISION_FOR_BETTER_READABILITY = 'Low content quality. The text needs significant revision for better readability.',
}

/**
 * ContentScorerActivityOutput
 */
export type ContentScorerActivityOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   * The error that occurred during the activity
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   * The Temporal workflow run ID
   */
  run_id: string;
  analysis?: Analysis;
  feedback?: ContentQualityFeedback | null;
  /**
   * Suggestions
   */
  suggestions?: Array<ContentSuggestions> | null;
};

/**
 * ContentSuggestions
 */
export enum ContentSuggestions {
  USE_SHORTER_SENTENCES_AND_SIMPLER_WORDS_TO_IMPROVE_READABILITY = 'Use shorter sentences and simpler words to improve readability.',
  YOUR_TEXT_MAY_BE_TOO_COMPLEX_CONSIDER_SIMPLIFYING_VOCABULARY_AND_SENTENCE_STRUCTURE = 'Your text may be too complex. Consider simplifying vocabulary and sentence structure.',
  YOUR_SENTENCES_ARE_QUITE_LONG_CONSIDER_BREAKING_THEM_INTO_SHORTER_ONES = 'Your sentences are quite long. Consider breaking them into shorter ones.',
  YOUR_SENTENCES_ARE_VERY_SHORT_CONSIDER_COMBINING_SOME_FOR_BETTER_FLOW = 'Your sentences are very short. Consider combining some for better flow.',
  YOUR_VOCABULARY_DIVERSITY_IS_LOW_TRY_USING_A_WIDER_RANGE_OF_WORDS = 'Your vocabulary diversity is low. Try using a wider range of words.',
  YOUR_TEXT_IS_WELL_BALANCED_CONSIDER_PROOFREADING_FOR_MINOR_IMPROVEMENTS = 'Your text is well-balanced. Consider proofreading for minor improvements.',
}

/**
 * CooldownInfo
 * Cooldown information for an API key.
 */
export type CooldownInfo = {
  /**
   * Api Key
   * The API key identifier
   */
  api_key: string;
  /**
   * Remaining Seconds
   * Remaining cooldown time in seconds
   */
  remaining_seconds: number;
  /**
   * Cooldown Type
   * Type of cooldown (increase/decrease)
   */
  cooldown_type: string;
};

/**
 * CreatorResponse
 */
export type CreatorResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Email
   */
  email: string;
};

/**
 * Dialects
 */
export enum Dialects {
  AMERICAN_ENGLISH = 'american_english',
  BRITISH_ENGLISH = 'british_english',
  CANADIAN_ENGLISH = 'canadian_english',
}

/**
 * EditStatusResponse
 */
export type EditStatusResponse = {
  /**
   * Workflow Id
   */
  workflow_id: string;
  status: WorkflowStatus;
  /**
   * Run Id
   */
  run_id?: string | null;
  result?: RewriteOutput | null;
  /**
   * Error Message
   */
  error_message?: string | null;
};

/**
 * ErrorResponse
 */
export type ErrorResponse = {
  /**
   * Detail
   * A description of the error that occurred.
   */
  detail: string;
  /**
   * Status
   * The HTTP status code generated by the server for this issue
   */
  status: number;
  /**
   * Request Id
   * A unique ID associated with the HTTP request.
   */
  request_id: string;
};

/**
 * FeedbackRequest
 */
export type FeedbackRequest = {
  /**
   * Workflow Id
   */
  workflow_id: string;
  /**
   * Request Id
   */
  request_id: string;
  /**
   * Helpful
   */
  helpful: boolean;
  /**
   * Feedback
   */
  feedback?: string | null;
  /**
   * Original
   */
  original?: string | null;
  /**
   * Suggestion
   */
  suggestion?: string | null;
  /**
   * Category
   */
  category?: string | null;
};

/**
 * FinalScores
 */
export type FinalScores = {
  content_score?: ContentScorerActivityOutput | null;
  issue_score?: IssueScores | null;
  /**
   * Quality Score
   */
  quality_score?: number | null;
};

/**
 * GlobalDefaultsResponse
 */
export type GlobalDefaultsResponse = {
  /**
   * Tier
   */
  tier: string;
  /**
   * Term Limit
   */
  term_limit: number;
  /**
   * Style Guide Limit
   */
  style_guide_limit: number;
  /**
   * Token Limit
   */
  token_limit: number;
  /**
   * Trial Period
   */
  trial_period: number;
  /**
   * Organization Status
   */
  organization_status: string;
};

/**
 * GlobalDefaultsUpdate
 */
export type GlobalDefaultsUpdate = {
  /**
   * Term Limit
   */
  term_limit?: number | null;
  /**
   * Style Guide Limit
   */
  style_guide_limit?: number | null;
  /**
   * Token Limit
   */
  token_limit?: number | null;
  /**
   * Trial Period
   */
  trial_period?: number | null;
  /**
   * Organization Status
   */
  organization_status?: string | null;
};

/**
 * GrammarActivityOutput
 */
export type GrammarActivityOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   * The error that occurred during the activity
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   * The Temporal workflow run ID
   */
  run_id: string;
  /**
   * Changes
   */
  changes: Array<GrammarChange>;
};

/**
 * GrammarCategory
 */
export enum GrammarCategory {
  GRAMMAR_AGREEMENT = 'Grammar Agreement',
  PUNCTUATION = 'Punctuation',
  CAPITALIZATION = 'Capitalization',
  SPELLING = 'Spelling',
  SENTENCE_STRUCTURE = 'Sentence Structure',
  VERB_FORMS = 'Verb Forms',
  CONTEXT_FIT = 'Context Fit',
  OTHER = 'other',
}

/**
 * GrammarChange
 */
export type GrammarChange = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Modified
   * The modified text
   */
  modified: string;
  /**
   * Change Start Char Idx
   * The start index of the change (calculated from context)
   */
  change_start_char_idx?: number;
  /**
   * Change Type
   */
  change_type?: 'grammar';
  /**
   * Context Before
   * Text that appears before the original text
   */
  context_before?: string;
  /**
   * Context After
   * Text that appears after the original text
   */
  context_after?: string;
  category: GrammarCategory;
};

/**
 * GrammarScore
 */
export type GrammarScore = {
  /**
   * Score
   */
  score?: number | null;
  /**
   * Issues
   */
  issues?: number | null;
};

/**
 * HeliosOneWorkflowOutput
 */
export type HeliosOneWorkflowOutput = {
  /**
   * Created At
   * The date and time the workflow was created
   */
  created_at: string;
  /**
   * Errors
   * The errors that occurred during the workflow
   */
  errors?: Array<WorkflowError>;
  /**
   * The initial scores of the workflow
   */
  initial_scores?: InitialScores;
  /**
   * The final scores of the workflow
   */
  final_scores?: FinalScores;
  /**
   * The initial issue counts of the workflow
   */
  initial_issue_counts?: IssueCounts | null;
  /**
   * The final issue counts of the workflow
   */
  final_issue_counts?: IssueCounts | null;
  /**
   * The initial content metrics of the workflow
   */
  initial_content_metrics?: ContentMetrics | null;
  /**
   * The final content metrics of the workflow
   */
  final_content_metrics?: ContentMetrics | null;
  /**
   * Input File
   * The path to the input file
   */
  input_file: string;
  /**
   * The parameters used to run the workflow
   */
  parameters?: Parameters;
  /**
   * Run Id
   * The Temporal workflow run ID
   */
  run_id: string;
  /**
   * Workflow Id
   * The Temporal workflow ID
   */
  workflow_id: string;
  /**
   * The result of the grammar activity
   */
  grammar_result?: GrammarActivityOutput | null;
  /**
   * The result of the merging activity
   */
  merging_result?: MergingActivityOutput | null;
  /**
   * The result of the parser activity
   */
  parser_result?: ParserResponse | null;
  /**
   * The result of the sentence length activity
   */
  sentence_length_result?: SentenceLengthActivityOutput | null;
  /**
   * The result of the sentence structure activity
   */
  sentence_structure_result?: SentenceStructureOutput | null;
  /**
   * The result of the simple vocabulary activity
   */
  simple_vocabulary_result?: SimpleVocabOutput | null;
  /**
   * The result of the tone activity
   */
  tone_result?: ToneCheckOutput | null;
  /**
   * The result of the style guide activity
   */
  style_guide_result?: StyleGuideOutput | null;
  /**
   * The result of the terminology activity
   */
  replace_terms_result?: TermReplaceActivityOutput | null;
};

/**
 * ImportSummary
 */
export type ImportSummary = {
  /**
   * Entries Processed
   */
  entries_processed?: number;
  /**
   * Concepts Created
   */
  concepts_created?: number;
  /**
   * Concepts Deleted
   */
  concepts_deleted?: number;
  /**
   * Terms Created Or Updated
   */
  terms_created_or_updated?: number;
  /**
   * Errors
   */
  errors?: Array<string>;
};

/**
 * InitialScores
 */
export type InitialScores = {
  content_score?: ContentScorerActivityOutput | null;
  issue_score?: IssueScores | null;
  /**
   * Quality Score
   */
  quality_score?: number | null;
};

/**
 * Invitation
 */
export type Invitation = {
  /**
   * Role
   */
  role?: string | null;
  /**
   * Email
   */
  email: string;
};

/**
 * InvitedUser
 */
export type InvitedUser = {
  /**
   * Role
   */
  role?: string | null;
  /**
   * Email
   */
  email: string;
  /**
   * Invite Sent At
   */
  invite_sent_at: string;
};

/**
 * Issue
 */
export type Issue = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Position details of the issue
   */
  position: Position;
  /**
   * Subcategory
   * The sub-category of the change
   */
  subcategory: GrammarCategory | ClarityCategory | ToneCategory | ConsistencyCategory | TermReplaceCategory;
  category: IssueCategory | null;
};

/**
 * IssueCategory
 */
export enum IssueCategory {
  CLARITY = 'clarity',
  GRAMMAR = 'grammar',
  CONSISTENCY = 'consistency',
  TERMINOLOGY = 'terminology',
  TONE = 'tone',
}

/**
 * IssueCounts
 */
export type IssueCounts = {
  /**
   * Grammar Issues
   */
  grammar_issues?: number | null;
  /**
   * Style Guide Issues
   */
  style_guide_issues?: number | null;
  /**
   * Terminology Issues
   */
  terminology_issues?: number | null;
};

/**
 * IssueScores
 */
export type IssueScores = {
  /**
   * Grammar Issues
   */
  grammar_issues?: number | null;
  /**
   * Style Guide Issues
   */
  style_guide_issues?: number | null;
  /**
   * Terminology Issues
   */
  terminology_issues?: number | null;
  /**
   * Grammar Score
   */
  grammar_score?: number | null;
  /**
   * Style Guide Score
   */
  style_guide_score?: number | null;
  /**
   * Terminology Score
   */
  terminology_score?: number | null;
};

/**
 * MatchedTerm
 */
export type MatchedTerm = {
  /**
   * Term
   */
  term: string;
  /**
   * Matched Ngram
   */
  matched_ngram: string;
};

/**
 * Member
 */
export type Member = {
  /**
   * Role
   */
  role?: string | null;
};

/**
 * MergingActivityOutput
 */
export type MergingActivityOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   * The error that occurred during the activity
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   * The Temporal workflow run ID
   */
  run_id: string;
  /**
   * Merged Text
   * Text after applying all changes
   */
  merged_text: string;
};

/**
 * Organization
 */
export type Organization = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Display Name
   */
  display_name: string;
  /**
   * Picture
   */
  picture: string;
};

/**
 * OrganizationMember
 */
export type OrganizationMember = {
  /**
   * Role
   */
  role?: string | null;
  /**
   * Email
   */
  email: string;
  /**
   * Name
   */
  name: string;
};

/**
 * OrganizationRequest
 */
export type OrganizationRequest = {
  /**
   * Name
   */
  name: string;
  /**
   * Admin
   */
  admin?: string | null;
  /**
   * Domain
   */
  domain: string;
  /**
   * Display Name
   */
  display_name?: string | null;
  /**
   * Token Limit
   */
  token_limit?: number | null;
  /**
   * Expiration Days
   */
  expiration_days?: number | null;
  /**
   * Trial
   */
  trial?: boolean | null;
  /**
   * Tier
   */
  tier?: string;
  /**
   * Is Internal
   */
  is_internal?: boolean;
};

/**
 * OrganizationResponse
 */
export type OrganizationResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Token Limit
   */
  token_limit: number;
  /**
   * Tokens Used
   */
  tokens_used: number;
  /**
   * Tier
   */
  tier: string;
  /**
   * Style Guide Limit
   */
  style_guide_limit: number;
  /**
   * Term Limit
   */
  term_limit: number;
  /**
   * Display Name
   */
  display_name?: string | null;
  /**
   * Created Date
   */
  created_date: string;
  /**
   * Expiration
   */
  expiration: string | null;
  /**
   * Domain
   */
  domain: string;
  created_by: CreatorResponse | null;
  /**
   * Is Internal
   */
  is_internal: boolean;
  /**
   * Trial
   */
  readonly trial: boolean;
  /**
   * Tokens
   */
  readonly tokens: number;
};

/**
 * OrganizationResponseAdmin
 */
export type OrganizationResponseAdmin = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Token Limit
   */
  token_limit: number;
  /**
   * Tokens Used
   */
  tokens_used: number;
  /**
   * Tier
   */
  tier: string;
  /**
   * Style Guide Limit
   */
  style_guide_limit: number;
  /**
   * Term Limit
   */
  term_limit: number;
  /**
   * Display Name
   */
  display_name?: string | null;
  /**
   * Created Date
   */
  created_date: string;
  /**
   * Expiration
   */
  expiration: string | null;
  /**
   * Domain
   */
  domain: string;
  created_by: CreatorResponse | null;
  /**
   * Admins
   */
  admins?: Array<string> | null;
  /**
   * Style Guides
   */
  style_guides?: number;
  /**
   * Term Sets
   */
  term_sets?: number;
  /**
   * Country
   */
  country: string | null;
  /**
   * Is Internal
   */
  is_internal: boolean;
  /**
   * Trial
   */
  readonly trial: boolean;
  /**
   * Tokens
   */
  readonly tokens: number;
};

/**
 * OrganizationResponseFull
 */
export type OrganizationResponseFull = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Token Limit
   */
  token_limit: number;
  /**
   * Tokens Used
   */
  tokens_used: number;
  /**
   * Tier
   */
  tier: string;
  /**
   * Style Guide Limit
   */
  style_guide_limit: number;
  /**
   * Term Limit
   */
  term_limit: number;
  /**
   * Display Name
   */
  display_name?: string | null;
  /**
   * Created Date
   */
  created_date: string;
  /**
   * Expiration
   */
  expiration: string | null;
  /**
   * Domain
   */
  domain: string;
  created_by: CreatorResponse | null;
  /**
   * Admins
   */
  admins?: Array<string> | null;
  /**
   * Style Guides
   */
  style_guides?: number;
  /**
   * Term Sets
   */
  term_sets?: number;
  /**
   * Country
   */
  country: string | null;
  /**
   * Trial
   */
  readonly trial: boolean;
  /**
   * Tokens
   */
  readonly tokens: number;
};

/**
 * OrganizationSignupRequest
 */
export type OrganizationSignupRequest = {
  /**
   * Display Name
   * Display name for the organization
   */
  display_name: string;
  /**
   * User Role
   * User role in the organization
   */
  user_role?: string | null;
  /**
   * Country
   * Country of the organization
   */
  country?: string | null;
  /**
   * First Name
   * First name of the user
   */
  first_name?: string | null;
  /**
   * Last Name
   * Last name of the user
   */
  last_name?: string | null;
  /**
   * Job Title
   * Job title of the user
   */
  job_title?: string | null;
  /**
   * Marketing Consent
   * User consent for marketing communications
   */
  marketing_consent?: boolean | null;
  /**
   * Captcha Response
   * CAPTCHA response
   */
  captcha_response: string;
};

/**
 * OrganizationSignupResponse
 */
export type OrganizationSignupResponse = {
  /**
   * Organization Id
   */
  organization_id: string;
  /**
   * Organization Name
   */
  organization_name: string;
  /**
   * Display Name
   */
  display_name: string;
  /**
   * Message
   */
  message: string;
};

/**
 * OrganizationUpdate
 */
export type OrganizationUpdate = {
  /**
   * Domain
   */
  domain?: string | null;
  /**
   * Display Name
   */
  display_name?: string | null;
  /**
   * Token Limit
   */
  token_limit?: number | null;
  /**
   * Tokens Used
   */
  tokens_used?: number | null;
  /**
   * Expiration Days
   */
  expiration_days?: number | null;
  /**
   * Trial
   */
  trial?: boolean | null;
  /**
   * Tier
   */
  tier?: string | null;
  /**
   * Style Guide Limit
   */
  style_guide_limit?: number | null;
  /**
   * Term Limit
   */
  term_limit?: number | null;
  /**
   * Is Internal
   */
  is_internal?: boolean | null;
};

/**
 * OriginalContent
 */
export type OriginalContent = {
  /**
   * Issues
   */
  issues?: Array<Issue>;
  scores?: ScoreOutput | null;
};

/**
 * PaginatedConceptsResponse
 * Pageable response for concepts in term management UI
 */
export type PaginatedConceptsResponse = {
  /**
   * Concepts
   */
  concepts: Array<ConceptWithTerms>;
  /**
   * Total Count
   */
  total_count: number;
  /**
   * Total Unfiltered Concepts
   */
  total_unfiltered_concepts: number;
  /**
   * Page
   */
  page: number;
  /**
   * Page Size
   */
  page_size: number;
  /**
   * Total Pages
   */
  total_pages: number;
};

/**
 * PaginatedOrganizationResponse
 */
export type PaginatedOrganizationResponse = {
  /**
   * Total
   */
  total: number;
  /**
   * Page
   */
  page: number;
  /**
   * Page Size
   */
  page_size: number;
  /**
   * Organizations
   */
  organizations: Array<OrganizationResponse>;
};

/**
 * Parameters
 */
export type Parameters = {
  /**
   * The dialect used for the activity
   */
  dialect?: Dialects | null;
  /**
   * The tone used for the activity
   */
  tone?: Tones | null;
  /**
   * The style guide used for the activity
   */
  style_guide?: StyleGuide | null;
  /**
   * Max Words
   * The maximum number of words allowed for the activity
   */
  max_words?: number | null;
  /**
   * Replace Terms
   * Formatted string of terms to replace for the activity
   */
  replace_terms?: string | null;
  /**
   * Do Not Flag Terms
   * Formatted string of terms to not flag for the activity
   */
  do_not_flag_terms?: string | null;
  /**
   * Context
   * The context of the text in a structured document
   */
  context?: string | null;
};

/**
 * ParserResponse
 */
export type ParserResponse = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   * The error that occurred during the activity
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   * The Temporal workflow run ID
   */
  run_id: string;
  /**
   * Extracted Text
   * The extracted text from the file.
   */
  extracted_text: string;
};

/**
 * Position
 */
export type Position = {
  /**
   * Start Index
   * The start index of the issue in the text
   */
  start_index: number;
};

/**
 * QualityScore
 */
export type QualityScore = {
  /**
   * Score
   */
  score?: number | null;
  grammar?: GrammarScore | null;
  consistency?: ConsistencyScore | null;
  terminology?: TerminologyScore | null;
};

/**
 * RewriteContent
 */
export type RewriteContent = {
  /**
   * Text
   */
  text?: string | null;
  scores?: ScoreOutput | null;
};

/**
 * RewriteOutput
 */
export type RewriteOutput = {
  /**
   * Workflow Id
   */
  workflow_id?: string;
  /**
   * Errors
   */
  errors?: Array<WorkflowError>;
  final_scores?: FinalScores | null;
  initial_scores?: InitialScores | null;
  webhook_response?: WebhookResponse | null;
  /**
   * Merged Text
   */
  merged_text: string;
  /**
   * Original Text
   */
  original_text: string;
  /**
   * Results
   */
  results: Array<HeliosOneWorkflowOutput>;
  /**
   * Total Doc Tokens
   * The total number of tokens in the document
   */
  total_doc_tokens?: number;
};

/**
 * RewriteResponse
 */
export type RewriteResponse = {
  config?: ConfigOptions | null;
  original?: SuggestionOriginalContent | null;
  rewrite?: RewriteContent | null;
  workflow: WorkflowInfo;
};

/**
 * ScoreOutput
 */
export type ScoreOutput = {
  quality?: QualityScore | null;
  analysis?: AnalysisScore | null;
};

/**
 * SentenceLengthActivityOutput
 */
export type SentenceLengthActivityOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   */
  run_id: string;
  /**
   * Changes
   */
  changes: Array<SentenceLengthChange>;
  /**
   * Text
   */
  text: string;
};

/**
 * SentenceLengthCategory
 */
export enum SentenceLengthCategory {
  UNNECESSARY_WORDS = 'Unnecessary Words',
  SENTENCE_SPLITTING = 'Sentence Splitting',
  CONCISE_WORDING = 'Concise Wording',
  OTHER = 'other',
}

/**
 * SentenceLengthChange
 */
export type SentenceLengthChange = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Modified
   * The modified text
   */
  modified: string;
  /**
   * Change Start Char Idx
   * The start index of the change (calculated from context)
   */
  change_start_char_idx?: number;
  /**
   * Change Type
   */
  change_type?: 'sentence_length';
  /**
   * Context Before
   * Text that appears before the original text
   */
  context_before?: string;
  /**
   * Context After
   * Text that appears after the original text
   */
  context_after?: string;
  category: SentenceLengthCategory;
};

/**
 * SentenceStructureCategory
 */
export enum SentenceStructureCategory {
  COMPLEX_VERB_TENSES = 'Complex Verb Tenses',
  HIDDEN_VERBS = 'Hidden Verbs',
  DIRECT_STATEMENTS = 'Direct Statements',
  PASSIVE_VOICE = 'Passive Voice',
  PHRASAL_VERBS = 'Phrasal Verbs',
  FORMAL_GRAMMAR_FORMS = 'Formal Grammar Forms',
  OTHER = 'other',
}

/**
 * SentenceStructureChange
 */
export type SentenceStructureChange = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Modified
   * The modified text
   */
  modified: string;
  /**
   * Change Start Char Idx
   * The start index of the change (calculated from context)
   */
  change_start_char_idx?: number;
  /**
   * Change Type
   */
  change_type?: 'sentence_structure';
  /**
   * Context Before
   * Text that appears before the original text
   */
  context_before?: string;
  /**
   * Context After
   * Text that appears after the original text
   */
  context_after?: string;
  category: SentenceStructureCategory;
};

/**
 * SentenceStructureOutput
 */
export type SentenceStructureOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   */
  run_id: string;
  /**
   * Changes
   */
  changes: Array<SentenceStructureChange>;
  /**
   * Text
   */
  text: string;
};

/**
 * SimpleVocabCategory
 */
export enum SimpleVocabCategory {
  SIMPLER_WORDS = 'Simpler Words',
  OTHER = 'other',
}

/**
 * SimpleVocabChange
 */
export type SimpleVocabChange = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Modified
   * The modified text
   */
  modified: string;
  /**
   * Change Start Char Idx
   * The start index of the change (calculated from context)
   */
  change_start_char_idx?: number;
  /**
   * Change Type
   */
  change_type?: 'simple_vocab';
  /**
   * Context Before
   * Text that appears before the original text
   */
  context_before?: string;
  /**
   * Context After
   * Text that appears after the original text
   */
  context_after?: string;
  category: SimpleVocabCategory;
};

/**
 * SimpleVocabOutput
 */
export type SimpleVocabOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   */
  run_id: string;
  /**
   * Text
   */
  text: string;
  /**
   * Changes
   */
  changes: Array<SimpleVocabChange>;
};

/**
 * StaffRequest
 */
export type StaffRequest = {
  /**
   * Admin
   */
  admin?: boolean;
  /**
   * Email
   */
  email: string;
};

/**
 * StaffResponse
 */
export type StaffResponse = {
  /**
   * Name
   */
  name: string;
  /**
   * Email
   */
  email: string;
  /**
   * Admin
   */
  admin: boolean;
};

/**
 * StaffUpdate
 */
export type StaffUpdate = {
  /**
   * Admin
   */
  admin?: boolean;
};

/**
 * StartEditResponse
 * Response after successfully starting a rewrite workflow.
 */
export type StartEditResponse = {
  /**
   * Message
   */
  message?: string;
  /**
   * Workflow Id
   */
  workflow_id: string;
};

/**
 * StyleCheckResponse
 */
export type StyleCheckResponse = {
  config?: ConfigOptions | null;
  original?: OriginalContent | null;
  workflow: WorkflowInfo;
};

/**
 * StyleGuide
 */
export type StyleGuide = {
  /**
   * The type of style guide to use
   */
  style_guide_type?: StyleGuides | null;
  /**
   * Style Guide Id
   * The ID of the style guide to use
   */
  style_guide_id?: string | null;
};

/**
 * StyleGuideChange
 */
export type StyleGuideChange = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Modified
   * The modified text
   */
  modified: string;
  /**
   * Change Start Char Idx
   * The start index of the change (calculated from context)
   */
  change_start_char_idx?: number;
  /**
   * Change Type
   */
  change_type?: 'consistency';
  /**
   * Context Before
   * Text that appears before the original text
   */
  context_before?: string;
  /**
   * Context After
   * Text that appears after the original text
   */
  context_after?: string;
  category: ConsistencyCategory;
};

/**
 * StyleGuideOutput
 */
export type StyleGuideOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   * The error that occurred during the activity
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   * The Temporal workflow run ID
   */
  run_id: string;
  /**
   * Changes
   */
  changes: Array<StyleGuideChange>;
};

/**
 * StyleGuideRequestBody
 */
export type StyleGuideRequestBody = {
  /**
   * File Upload
   * The document to analyze. We accept PDF files (.pdf) up to 2 MB.
   */
  file_upload: Blob | File;
  /**
   * Name
   * A friendly name for your style guide to help you identify it later.
   */
  name: string;
};

/**
 * StyleGuideResponse
 */
export type StyleGuideResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   * The name of the style guide.
   */
  name: string;
  /**
   * Created At
   * The UTC date and time the style guide was created.
   */
  created_at: string;
  /**
   * Created By
   * The ID of the user who created the style guide.
   */
  created_by: string;
  /**
   * The status of the submitted style guide.
   */
  status: StyleGuideStatus;
  /**
   * Updated At
   * The UTC datetime that the style guide was last updated. If null, the style guide has never been updated.
   */
  updated_at?: string | null;
  /**
   * Updated By
   * The ID of the user who last updated the style guide. If null, the style guide has never been updated.
   */
  updated_by?: string | null;
  /**
   * Summary
   * User-friendly summary of the style guide's contents and characteristics
   */
  summary?: string | null;
};

/**
 * StyleGuideStatus
 */
export enum StyleGuideStatus {
  RUNNING = 'running',
  COMPLETED = 'completed',
  FAILED = 'failed',
  NOT_FOUND = 'not_found',
}

/**
 * StyleGuides
 */
export enum StyleGuides {
  AP = 'ap',
  CHICAGO = 'chicago',
  MICROSOFT = 'microsoft',
  STYLE_BRAND_IMPORTER = 'style_brand_importer',
}

/**
 * StyleRequestBody
 */
export type StyleRequestBody = {
  /**
   * File Upload
   * The document to analyze. Text files (.txt), PDFs (.pdf), and Markdown files (.md) are accepted. The max file size is 1.5 MB
   */
  file_upload: Blob | File;
  /**
   * The language variant you'd like us to use for analysis. Choose from American English, British English, or other supported dialects.
   */
  dialect: Dialects;
  /**
   * The tone variation you're aiming for. Options include formal, academic, casual, and other tone variations to match your content goals.
   */
  tone?: Tones | null;
  /**
   * Style Guide
   * The style guide to follow for your content. You can use a style guide ID or choose from built-in options: `ap`, `chicago`, or `microsoft`.
   */
  style_guide: string;
  /**
   * Webhook Url
   * A URL that results will be POSTed to once the process completes.
   */
  webhook_url?: string | null;
};

/**
 * StyleRewriteRequestBody
 */
export type StyleRewriteRequestBody = {
  /**
   * File Upload
   * The document to rewrite. Text files (.txt) and Markdown files (.md) are accepted. The max file size is 1.5 MB
   */
  file_upload: Blob | File;
  /**
   * The language variant you'd like us to use for analysis. Choose from American English, British English, or other supported dialects.
   */
  dialect: Dialects;
  /**
   * The tone variation you're aiming for. Options include formal, academic, casual, and other tone variations to match your content goals.
   */
  tone?: Tones | null;
  /**
   * Style Guide
   * The style guide to follow for your content. You can use a style guide ID or choose from built-in options: `ap`, `chicago`, or `microsoft`.
   */
  style_guide: string;
  /**
   * Webhook Url
   * A URL that results will be POSTed to once the process completes.
   */
  webhook_url?: string | null;
};

/**
 * Suggestion
 */
export type Suggestion = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Position details of the issue
   */
  position: Position;
  /**
   * Subcategory
   * The sub-category of the change
   */
  subcategory: GrammarCategory | ClarityCategory | ToneCategory | ConsistencyCategory | TermReplaceCategory;
  /**
   * Suggestion
   * The suggested replacement text
   */
  suggestion: string;
  category: IssueCategory | null;
};

/**
 * SuggestionOriginalContent
 */
export type SuggestionOriginalContent = {
  /**
   * Issues
   */
  issues?: Array<Suggestion>;
  scores?: ScoreOutput | null;
};

/**
 * SuggestionResponse
 */
export type SuggestionResponse = {
  config?: ConfigOptions | null;
  original?: SuggestionOriginalContent | null;
  workflow: WorkflowInfo;
};

/**
 * TermCreateRequest
 * Payload to create a new term for a concept
 */
export type TermCreateRequest = {
  /**
   * Term
   */
  term: string;
  type: TermType;
};

/**
 * TermDetail
 * Detailed term information for term management UI
 */
export type TermDetail = {
  /**
   * Id
   */
  id: string;
  /**
   * Term
   */
  term: string;
  type: TermType;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Created By
   */
  created_by?: string | null;
  /**
   * Updated By
   */
  updated_by?: string | null;
};

/**
 * TermItem
 */
export type TermItem = {
  /**
   * Term
   */
  term: string;
  /**
   * Type
   */
  type: string;
};

/**
 * TermReplaceActivityOutput
 */
export type TermReplaceActivityOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   * The error that occurred during the activity
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   * The Temporal workflow run ID
   */
  run_id: string;
  /**
   * Changes
   */
  changes: Array<TermReplaceChange>;
  /**
   * Has Terms
   * Whether the text had terms to replace; we'll skip the LLM call if not
   */
  has_terms: boolean;
};

/**
 * TermReplaceCategory
 */
export enum TermReplaceCategory {
  TERMINOLOGY = 'Terminology',
  OTHER = 'other',
}

/**
 * TermReplaceChange
 */
export type TermReplaceChange = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Modified
   * The modified text
   */
  modified: string;
  /**
   * Change Start Char Idx
   * The start index of the change (calculated from context)
   */
  change_start_char_idx?: number;
  /**
   * Change Type
   */
  change_type?: 'replace_terms';
  /**
   * Context Before
   * Text that appears before the original text
   */
  context_before?: string;
  /**
   * Context After
   * Text that appears after the original text
   */
  context_after?: string;
  category: TermReplaceCategory;
};

/**
 * TermResponse
 * DB-mapped representation of a term.
 */
export type TermResponse = {
  /**
   * Id
   */
  id: string;
  /**
   * Term
   */
  term: string;
  type: TermType;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Created By
   */
  created_by?: string | null;
  /**
   * Updated By
   */
  updated_by?: string | null;
};

/**
 * TermType
 * Represents the three types of terms in the terminology system.
 */
export enum TermType {
  PREFERRED = 'preferred',
  DEPRECATED = 'deprecated',
  CONTEXT_MATTERS = 'context_matters',
}

/**
 * TermUpdateRequest
 * Payload to update an existing term
 */
export type TermUpdateRequest = {
  /**
   * Term
   */
  term: string;
  type: TermType;
};

/**
 * TerminologyScore
 */
export type TerminologyScore = {
  /**
   * Score
   */
  score?: number | null;
  /**
   * Issues
   */
  issues?: number | null;
};

/**
 * TerminologySearchRequest
 */
export type TerminologySearchRequest = {
  /**
   * Text Chunk
   */
  text_chunk: string;
};

/**
 * TerminologySearchResponse
 */
export type TerminologySearchResponse = {
  /**
   * Results
   */
  results: Array<ConceptResult>;
};

/**
 * ThrottleConfig
 * Throttle configuration for an API key.
 */
export type ThrottleConfig = {
  /**
   * Api Key
   * The API key identifier
   */
  api_key: string;
  /**
   * Tpm Limit
   * Tokens per minute limit
   */
  tpm_limit: number;
  /**
   * Tps Limit
   * Tokens per second limit
   */
  tps_limit: number;
  /**
   * Tps Burst Ms
   * TPS burst duration in milliseconds
   */
  tps_burst_ms: number;
  /**
   * Safety Margin
   * Safety margin as a decimal (0.1 = 10%)
   */
  safety_margin: number;
  /**
   * Lease Ttl Ms
   * Lease TTL in milliseconds
   */
  lease_ttl_ms: number;
  /**
   * Aimd Decrease Rate
   * AIMD decrease rate as a decimal
   */
  aimd_decrease_rate: number;
  /**
   * Aimd Increase Rate
   * AIMD increase rate as a decimal
   */
  aimd_increase_rate: number;
  /**
   * Aimd Clean Window Seconds
   * AIMD clean window in seconds
   */
  aimd_clean_window_seconds: number;
  /**
   * Ttl Seconds
   * Configuration TTL in seconds
   */
  ttl_seconds: number;
  /**
   * Ttl Minutes
   * Configuration TTL in minutes
   */
  ttl_minutes: number;
  /**
   * Gsu Tpm Percentage
   * Percentage of 1 GSU TPM capacity
   */
  gsu_tpm_percentage: number;
  /**
   * Gsu Tps Percentage
   * Percentage of 1 GSU TPS capacity
   */
  gsu_tps_percentage: number;
};

/**
 * ThrottleMetricsResponse
 * Response containing all throttle metrics.
 */
export type ThrottleMetricsResponse = {
  /**
   * Configurations
   * List of all throttle configurations
   */
  configurations: Array<ThrottleConfig>;
  /**
   * Cooldowns
   * List of active cooldowns
   */
  cooldowns: Array<CooldownInfo>;
  /**
   * Summary
   * Summary statistics
   */
  summary: {
    [key: string]: unknown;
  };
  /**
   * Timestamp
   * Timestamp of the metrics snapshot
   */
  timestamp: string;
};

/**
 * ThrottleResetRequest
 * Request to reset or update throttle configuration.
 */
export type ThrottleResetRequest = {
  /**
   * Api Key
   * The API key to reset/update
   */
  api_key: string;
  /**
   * Gsu Percentage
   * Percentage of 1 GSU capacity (e.g., 1000 for 1000%)
   */
  gsu_percentage?: number;
  /**
   * Tpm Limit
   * Optional: Override TPM limit directly
   */
  tpm_limit?: number | null;
  /**
   * Tps Limit
   * Optional: Override TPS limit directly
   */
  tps_limit?: number | null;
  /**
   * Tps Burst Ms
   * Optional: Override TPS burst window in milliseconds (default: keeps existing or 5000)
   */
  tps_burst_ms?: number | null;
  /**
   * Clear Aimd State
   * Clear AIMD state (successes, 429 history)
   */
  clear_aimd_state?: boolean;
  /**
   * Reset Cooldowns
   * Reset increase/decrease cooldowns
   */
  reset_cooldowns?: boolean;
};

/**
 * ThrottleResetResponse
 * Response after resetting throttle configuration.
 */
export type ThrottleResetResponse = {
  /**
   * Api Key
   * The API key that was reset
   */
  api_key: string;
  /**
   * Old Tpm Limit
   * Previous TPM limit
   */
  old_tpm_limit: number | null;
  /**
   * Old Tps Limit
   * Previous TPS limit
   */
  old_tps_limit: number | null;
  /**
   * New Tpm Limit
   * New TPM limit
   */
  new_tpm_limit: number;
  /**
   * New Tps Limit
   * New TPS limit
   */
  new_tps_limit: number;
  /**
   * Gsu Percentage
   * Percentage of 1 GSU capacity
   */
  gsu_percentage: number;
  /**
   * Aimd State Cleared
   * Whether AIMD state was cleared
   */
  aimd_state_cleared: boolean;
  /**
   * Cooldowns Reset
   * Whether cooldowns were reset
   */
  cooldowns_reset: boolean;
};

/**
 * ThrottleToggleRequest
 * Request to toggle rate limiting on/off.
 */
export type ThrottleToggleRequest = {
  /**
   * Enabled
   * Whether to enable or disable rate limiting
   */
  enabled: boolean;
};

/**
 * ThrottleToggleResponse
 * Response after toggling rate limiting.
 */
export type ThrottleToggleResponse = {
  /**
   * Enabled
   * Current rate limiting state
   */
  enabled: boolean;
  /**
   * Previous State
   * Previous rate limiting state (None if not previously set)
   */
  previous_state: boolean | null;
  /**
   * Message
   * Confirmation message
   */
  message: string;
};

/**
 * ToneCategory
 */
export enum ToneCategory {
  TONE_ALIGNED_WORDING = 'Tone-Aligned Wording',
  TONE_SHAPING_STRUCTURE = 'Tone-Shaping Structure',
  TONE_SIGNAL_PUNCTUATION = 'Tone-Signal Punctuation',
  TRANSITIONS_AND_FLOW = 'Transitions and Flow',
  ADDITIONAL_TONE_CHANGES = 'Additional Tone Changes',
  OTHER = 'other',
}

/**
 * ToneChange
 */
export type ToneChange = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Modified
   * The modified text
   */
  modified: string;
  /**
   * Change Start Char Idx
   * The start index of the change (calculated from context)
   */
  change_start_char_idx?: number;
  /**
   * Change Type
   */
  change_type?: 'tone';
  /**
   * Context Before
   * Text that appears before the original text
   */
  context_before?: string;
  /**
   * Context After
   * Text that appears after the original text
   */
  context_after?: string;
  /**
   * The category of the change
   */
  category: ToneCategory;
};

/**
 * ToneCheckOutput
 */
export type ToneCheckOutput = {
  /**
   * Activity Name
   */
  activity_name?: string;
  /**
   * Cache Hit
   * Whether the LLM response was cached
   */
  cache_hit?: boolean;
  /**
   * Msg Hash
   * The hash of the messages used to run the activity
   */
  msg_hash?: string;
  /**
   * Error
   * The error that occurred during the activity
   */
  error?: string | null;
  /**
   * Duration
   * The duration of the activity in seconds
   */
  duration: number;
  /**
   * The parameters used to run the activity
   */
  parameters?: Parameters;
  /**
   * Repair Log
   * The LLM output's JSON repair log for the activity
   */
  repair_log?: Array<{
    [key: string]: string;
  }>;
  /**
   * Run Id
   * The Temporal workflow run ID
   */
  run_id: string;
  /**
   * Changes
   * Suggested changes to the text
   */
  changes: Array<ToneChange>;
  /**
   * Text
   * The original text
   */
  text: string;
};

/**
 * ToneScore
 */
export type ToneScore = {
  /**
   * Score
   */
  score?: number | null;
  /**
   * Informality
   */
  informality?: number | null;
  /**
   * Liveliness
   */
  liveliness?: number | null;
  /**
   * Informality Alignment
   */
  informality_alignment?: number | null;
  /**
   * Liveliness Alignment
   */
  liveliness_alignment?: number | null;
};

/**
 * Tones
 */
export enum Tones {
  ACADEMIC = 'academic',
  CONFIDENT = 'confident',
  CONVERSATIONAL = 'conversational',
  EMPATHETIC = 'empathetic',
  ENGAGING = 'engaging',
  FRIENDLY = 'friendly',
  PROFESSIONAL = 'professional',
  TECHNICAL = 'technical',
}

/**
 * UserProfileRequest
 */
export type UserProfileRequest = {
  /**
   * Role
   */
  role?: string | null;
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Last Name
   */
  last_name?: string | null;
  /**
   * Company
   */
  company?: string | null;
  /**
   * Job Title
   */
  job_title?: string | null;
  /**
   * Country
   */
  country?: string | null;
};

/**
 * UserResponse
 */
export type UserResponse = {
  /**
   * Name
   */
  name: string;
  /**
   * Email
   */
  email: string;
};

/**
 * ValidationErrorItem
 */
export type ValidationErrorItem = {
  /**
   * Type
   * The type of error that occurred.
   */
  type: string;
  /**
   * Loc
   * The location of the error in the request.
   */
  loc: Array<unknown>;
  /**
   * Msg
   * A description of the error that occurred.
   */
  msg: string;
  /**
   * Input
   * The input that caused the error.
   */
  input?: unknown;
  /**
   * Ctx
   * Additional context about the error.
   */
  ctx?: {
    [key: string]: unknown;
  };
};

/**
 * ValidationErrorResponse
 */
export type ValidationErrorResponse = {
  /**
   * Detail
   * A description of the error that occurred.
   */
  detail: string;
  /**
   * Status
   * The HTTP status code generated by the server for this issue
   */
  status: number;
  /**
   * Request Id
   * A unique ID associated with the HTTP request.
   */
  request_id: string;
  /**
   * Errors
   * Detailed field-specific errors
   */
  errors?: Array<ValidationErrorItem>;
};

/**
 * WebhookResponse
 */
export type WebhookResponse = {
  /**
   * Url
   */
  url: string;
  /**
   * Status Code
   */
  status_code: number;
};

/**
 * WorkflowError
 */
export type WorkflowError = {
  /**
   * Error
   * The error message
   */
  error: string;
};

/**
 * WorkflowInfo
 */
export type WorkflowInfo = {
  /**
   * Id
   * Workflow ID
   */
  id: string;
  /**
   * Api Version
   * API version
   */
  api_version?: string;
  /**
   * Generated At
   * UTC timestamp when the result was generated
   */
  generated_at?: string | null;
  status?: WorkflowStatus;
  /**
   * Type
   * Workflow type: checks, suggestions, or rewrites
   */
  type: string;
  /**
   * The status code received and URL used when sending the webhook if a webhook URL was included when starting the process.
   */
  webhook_response?: WebhookResponse | null;
};

/**
 * WorkflowResponse
 */
export type WorkflowResponse = {
  status: WorkflowStatus;
  /**
   * Workflow Id
   */
  workflow_id: string;
};

/**
 * WorkflowStatus
 */
export enum WorkflowStatus {
  RUNNING = 'running',
  COMPLETED = 'completed',
  FAILED = 'failed',
  NOT_FOUND = 'not_found',
}

/**
 * UserProfileResponse
 */
export type HeliosOneApiModulesUserMainUserProfileResponse = {
  /**
   * Role
   */
  role?: string | null;
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Last Name
   */
  last_name?: string | null;
  /**
   * Company
   */
  company?: string | null;
  /**
   * Job Title
   */
  job_title?: string | null;
  /**
   * Country
   */
  country?: string | null;
};

/**
 * UserProfileResponse
 */
export type HeliosOneApiSchemasSharedUserProfileResponse = {
  /**
   * First Name
   */
  first_name: string | null;
  /**
   * Last Name
   */
  last_name: string | null;
  /**
   * Job Title
   */
  job_title: string | null;
  /**
   * User Role
   */
  user_role: string | null;
  /**
   * Marketing Consent
   */
  marketing_consent: boolean | null;
};

/**
 * Issue
 */
export type IssueWritable = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Position details of the issue
   */
  position: Position;
  /**
   * Subcategory
   * The sub-category of the change
   */
  subcategory: GrammarCategory | ClarityCategory | ToneCategory | ConsistencyCategory | TermReplaceCategory;
};

/**
 * OrganizationResponse
 */
export type OrganizationResponseWritable = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Token Limit
   */
  token_limit: number;
  /**
   * Tokens Used
   */
  tokens_used: number;
  /**
   * Tier
   */
  tier: string;
  /**
   * Style Guide Limit
   */
  style_guide_limit: number;
  /**
   * Term Limit
   */
  term_limit: number;
  /**
   * Display Name
   */
  display_name?: string | null;
  /**
   * Created Date
   */
  created_date: string;
  /**
   * Expiration
   */
  expiration: string | null;
  /**
   * Domain
   */
  domain: string;
  created_by: CreatorResponse | null;
  /**
   * Is Internal
   */
  is_internal: boolean;
};

/**
 * OrganizationResponseAdmin
 */
export type OrganizationResponseAdminWritable = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Token Limit
   */
  token_limit: number;
  /**
   * Tokens Used
   */
  tokens_used: number;
  /**
   * Tier
   */
  tier: string;
  /**
   * Style Guide Limit
   */
  style_guide_limit: number;
  /**
   * Term Limit
   */
  term_limit: number;
  /**
   * Display Name
   */
  display_name?: string | null;
  /**
   * Created Date
   */
  created_date: string;
  /**
   * Expiration
   */
  expiration: string | null;
  /**
   * Domain
   */
  domain: string;
  created_by: CreatorResponse | null;
  /**
   * Admins
   */
  admins?: Array<string> | null;
  /**
   * Style Guides
   */
  style_guides?: number;
  /**
   * Term Sets
   */
  term_sets?: number;
  /**
   * Country
   */
  country: string | null;
  /**
   * Is Internal
   */
  is_internal: boolean;
};

/**
 * OrganizationResponseFull
 */
export type OrganizationResponseFullWritable = {
  /**
   * Id
   */
  id: string;
  /**
   * Name
   */
  name: string;
  /**
   * Token Limit
   */
  token_limit: number;
  /**
   * Tokens Used
   */
  tokens_used: number;
  /**
   * Tier
   */
  tier: string;
  /**
   * Style Guide Limit
   */
  style_guide_limit: number;
  /**
   * Term Limit
   */
  term_limit: number;
  /**
   * Display Name
   */
  display_name?: string | null;
  /**
   * Created Date
   */
  created_date: string;
  /**
   * Expiration
   */
  expiration: string | null;
  /**
   * Domain
   */
  domain: string;
  created_by: CreatorResponse | null;
  /**
   * Admins
   */
  admins?: Array<string> | null;
  /**
   * Style Guides
   */
  style_guides?: number;
  /**
   * Term Sets
   */
  term_sets?: number;
  /**
   * Country
   */
  country: string | null;
};

/**
 * Suggestion
 */
export type SuggestionWritable = {
  /**
   * Original
   * The original text
   */
  original: string;
  /**
   * Position details of the issue
   */
  position: Position;
  /**
   * Subcategory
   * The sub-category of the change
   */
  subcategory: GrammarCategory | ClarityCategory | ToneCategory | ConsistencyCategory | TermReplaceCategory;
  /**
   * Suggestion
   * The suggested replacement text
   */
  suggestion: string;
};

export type InternalGetAdminConstantsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/internal/constants';
};

export type InternalGetAdminConstantsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type InternalGetAdminConstantsError = InternalGetAdminConstantsErrors[keyof InternalGetAdminConstantsErrors];

export type InternalGetAdminConstantsResponses = {
  /**
   * Successful Response
   */
  200: ConstantsResponse;
};

export type InternalGetAdminConstantsResponse =
  InternalGetAdminConstantsResponses[keyof InternalGetAdminConstantsResponses];

export type InternalSubmitFeedbackData = {
  body: FeedbackRequest;
  path?: never;
  query?: never;
  url: '/v1/internal/demo-feedback';
};

export type InternalSubmitFeedbackErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type InternalSubmitFeedbackError = InternalSubmitFeedbackErrors[keyof InternalSubmitFeedbackErrors];

export type InternalSubmitFeedbackResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type InternalSubmitFeedbackResponse = InternalSubmitFeedbackResponses[keyof InternalSubmitFeedbackResponses];

export type StyleGuidesListStyleGuidesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/style-guides';
};

export type StyleGuidesListStyleGuidesErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Validation error.
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type StyleGuidesListStyleGuidesError = StyleGuidesListStyleGuidesErrors[keyof StyleGuidesListStyleGuidesErrors];

export type StyleGuidesListStyleGuidesResponses = {
  /**
   * Response 200 Style Guides-List Style Guides
   * Successfully retrieved style guides.
   */
  200: Array<StyleGuideResponse>;
};

export type StyleGuidesListStyleGuidesResponse =
  StyleGuidesListStyleGuidesResponses[keyof StyleGuidesListStyleGuidesResponses];

export type StyleGuidesCreateStyleGuideData = {
  body: StyleGuideRequestBody;
  path?: never;
  query?: never;
  url: '/v1/style-guides';
};

export type StyleGuidesCreateStyleGuideErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * The uploaded file exceeds the maximum allowed size.
   */
  413: ErrorResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type StyleGuidesCreateStyleGuideError =
  StyleGuidesCreateStyleGuideErrors[keyof StyleGuidesCreateStyleGuideErrors];

export type StyleGuidesCreateStyleGuideResponses = {
  /**
   * Style guide creation started successfully.
   */
  202: StyleGuideResponse;
};

export type StyleGuidesCreateStyleGuideResponse =
  StyleGuidesCreateStyleGuideResponses[keyof StyleGuidesCreateStyleGuideResponses];

export type StyleGuidesDeleteStyleGuideData = {
  body?: never;
  path: {
    /**
     * Style Guide Id
     * The ID of the style guide.
     */
    style_guide_id: string;
  };
  query?: never;
  url: '/v1/style-guides/{style_guide_id}';
};

export type StyleGuidesDeleteStyleGuideErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Cannot delete predefined style guides.
   */
  403: ErrorResponse;
  /**
   * Style guide not found.
   */
  404: ErrorResponse;
  /**
   * Validation error.
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type StyleGuidesDeleteStyleGuideError =
  StyleGuidesDeleteStyleGuideErrors[keyof StyleGuidesDeleteStyleGuideErrors];

export type StyleGuidesDeleteStyleGuideResponses = {
  /**
   * Style guide successfully deleted.
   */
  204: void;
};

export type StyleGuidesDeleteStyleGuideResponse =
  StyleGuidesDeleteStyleGuideResponses[keyof StyleGuidesDeleteStyleGuideResponses];

export type StyleGuidesGetStyleGuideData = {
  body?: never;
  path: {
    /**
     * Style Guide Id
     * The ID of the style guide.
     */
    style_guide_id: string;
  };
  query?: never;
  url: '/v1/style-guides/{style_guide_id}';
};

export type StyleGuidesGetStyleGuideErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * Style guide not found or invalid UUID format.
   */
  404: ErrorResponse;
  /**
   * Validation error.
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type StyleGuidesGetStyleGuideError = StyleGuidesGetStyleGuideErrors[keyof StyleGuidesGetStyleGuideErrors];

export type StyleGuidesGetStyleGuideResponses = {
  /**
   * Successfully retrieved the style guide.
   */
  200: StyleGuideResponse;
};

export type StyleGuidesGetStyleGuideResponse =
  StyleGuidesGetStyleGuideResponses[keyof StyleGuidesGetStyleGuideResponses];

export type StyleGuidesUpdateStyleGuideData = {
  body: BodyStyleGuidesUpdateStyleGuide;
  path: {
    /**
     * Style Guide Id
     * The ID of the style guide.
     */
    style_guide_id: string;
  };
  query?: never;
  url: '/v1/style-guides/{style_guide_id}';
};

export type StyleGuidesUpdateStyleGuideErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Cannot update predefined style guides.
   */
  403: ErrorResponse;
  /**
   * Style guide not found.
   */
  404: ErrorResponse;
  /**
   * Validation error.
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type StyleGuidesUpdateStyleGuideError =
  StyleGuidesUpdateStyleGuideErrors[keyof StyleGuidesUpdateStyleGuideErrors];

export type StyleGuidesUpdateStyleGuideResponses = {
  /**
   * The style guide was updated successfully.
   */
  200: StyleGuideResponse;
};

export type StyleGuidesUpdateStyleGuideResponse =
  StyleGuidesUpdateStyleGuideResponses[keyof StyleGuidesUpdateStyleGuideResponses];

export type StyleChecksCreateStyleCheckData = {
  body: StyleRequestBody;
  path?: never;
  query?: never;
  url: '/v1/style/checks';
};

export type StyleChecksCreateStyleCheckErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * The uploaded file exceeds the maximum allowed size.
   */
  413: ErrorResponse;
  /**
   * The request validation failed.
   */
  422: ValidationErrorResponse;
  /**
   * Token limit exceeded.
   */
  429: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type StyleChecksCreateStyleCheckError =
  StyleChecksCreateStyleCheckErrors[keyof StyleChecksCreateStyleCheckErrors];

export type StyleChecksCreateStyleCheckResponses = {
  /**
   * Request accepted.
   */
  202: WorkflowResponse;
};

export type StyleChecksCreateStyleCheckResponse =
  StyleChecksCreateStyleCheckResponses[keyof StyleChecksCreateStyleCheckResponses];

export type StyleChecksGetStyleCheckData = {
  body?: never;
  path: {
    /**
     * Workflow Id
     */
    workflow_id: string;
  };
  query?: never;
  url: '/v1/style/checks/{workflow_id}';
};

export type StyleChecksGetStyleCheckErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * The client attempted to poll or retrieve results for an ID that doesn't exist.
   */
  404: ErrorResponse;
  /**
   * The request validation failed.
   */
  422: ValidationErrorResponse;
  /**
   * An internal server error occurred while fetching the workflow result.
   */
  500: ErrorResponse;
};

export type StyleChecksGetStyleCheckError = StyleChecksGetStyleCheckErrors[keyof StyleChecksGetStyleCheckErrors];

export type StyleChecksGetStyleCheckResponses = {
  /**
   * Style check results.
   */
  200: StyleCheckResponse;
};

export type StyleChecksGetStyleCheckResponse =
  StyleChecksGetStyleCheckResponses[keyof StyleChecksGetStyleCheckResponses];

export type StyleSuggestionsCreateStyleSuggestionData = {
  body: StyleRequestBody;
  path?: never;
  query?: never;
  url: '/v1/style/suggestions';
};

export type StyleSuggestionsCreateStyleSuggestionErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * The uploaded file exceeds the maximum allowed size.
   */
  413: ErrorResponse;
  /**
   * The request validation failed.
   */
  422: ValidationErrorResponse;
  /**
   * Token limit exceeded.
   */
  429: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type StyleSuggestionsCreateStyleSuggestionError =
  StyleSuggestionsCreateStyleSuggestionErrors[keyof StyleSuggestionsCreateStyleSuggestionErrors];

export type StyleSuggestionsCreateStyleSuggestionResponses = {
  /**
   * Request accepted.
   */
  202: WorkflowResponse;
};

export type StyleSuggestionsCreateStyleSuggestionResponse =
  StyleSuggestionsCreateStyleSuggestionResponses[keyof StyleSuggestionsCreateStyleSuggestionResponses];

export type StyleSuggestionsGetStyleSuggestionData = {
  body?: never;
  path: {
    /**
     * Workflow Id
     */
    workflow_id: string;
  };
  query?: never;
  url: '/v1/style/suggestions/{workflow_id}';
};

export type StyleSuggestionsGetStyleSuggestionErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * The client attempted to poll or retrieve results for an ID that doesn't exist.
   */
  404: ErrorResponse;
  /**
   * The request validation failed.
   */
  422: ValidationErrorResponse;
  /**
   * An internal server error occurred while fetching the workflow result.
   */
  500: ErrorResponse;
};

export type StyleSuggestionsGetStyleSuggestionError =
  StyleSuggestionsGetStyleSuggestionErrors[keyof StyleSuggestionsGetStyleSuggestionErrors];

export type StyleSuggestionsGetStyleSuggestionResponses = {
  /**
   * Suggestion results.
   */
  200: SuggestionResponse;
};

export type StyleSuggestionsGetStyleSuggestionResponse =
  StyleSuggestionsGetStyleSuggestionResponses[keyof StyleSuggestionsGetStyleSuggestionResponses];

export type StyleRewritesCreateStyleRewriteData = {
  body: StyleRewriteRequestBody;
  path?: never;
  query?: never;
  url: '/v1/style/rewrites';
};

export type StyleRewritesCreateStyleRewriteErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * The uploaded file exceeds the maximum allowed size.
   */
  413: ErrorResponse;
  /**
   * The request validation failed.
   */
  422: ValidationErrorResponse;
  /**
   * Token limit exceeded.
   */
  429: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type StyleRewritesCreateStyleRewriteError =
  StyleRewritesCreateStyleRewriteErrors[keyof StyleRewritesCreateStyleRewriteErrors];

export type StyleRewritesCreateStyleRewriteResponses = {
  /**
   * Request accepted.
   */
  202: WorkflowResponse;
};

export type StyleRewritesCreateStyleRewriteResponse =
  StyleRewritesCreateStyleRewriteResponses[keyof StyleRewritesCreateStyleRewriteResponses];

export type StyleRewritesGetStyleRewriteData = {
  body?: never;
  path: {
    /**
     * Workflow Id
     */
    workflow_id: string;
  };
  query?: never;
  url: '/v1/style/rewrites/{workflow_id}';
};

export type StyleRewritesGetStyleRewriteErrors = {
  /**
   * Authentication failed or no valid API key provided.
   */
  401: ErrorResponse;
  /**
   * Forbidden
   */
  403: ErrorResponse;
  /**
   * The client attempted to poll or retrieve results for an ID that doesn't exist.
   */
  404: ErrorResponse;
  /**
   * The request validation failed.
   */
  422: ValidationErrorResponse;
  /**
   * An internal server error occurred while fetching the workflow result.
   */
  500: ErrorResponse;
};

export type StyleRewritesGetStyleRewriteError =
  StyleRewritesGetStyleRewriteErrors[keyof StyleRewritesGetStyleRewriteErrors];

export type StyleRewritesGetStyleRewriteResponses = {
  /**
   * Response Style Rewrites-Get Style Rewrite
   * Rewrite results.
   */
  200: RewriteResponse;
};

export type StyleRewritesGetStyleRewriteResponse =
  StyleRewritesGetStyleRewriteResponses[keyof StyleRewritesGetStyleRewriteResponses];
