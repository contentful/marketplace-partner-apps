// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type {
  InternalGetAdminConstantsData,
  InternalGetAdminConstantsErrors,
  InternalGetAdminConstantsResponses,
  InternalSubmitFeedbackData,
  InternalSubmitFeedbackErrors,
  InternalSubmitFeedbackResponses,
  StyleChecksCreateStyleCheckData,
  StyleChecksCreateStyleCheckErrors,
  StyleChecksCreateStyleCheckResponses,
  StyleChecksGetStyleCheckData,
  StyleChecksGetStyleCheckErrors,
  StyleChecksGetStyleCheckResponses,
  StyleGuidesCreateStyleGuideData,
  StyleGuidesCreateStyleGuideErrors,
  StyleGuidesCreateStyleGuideResponses,
  StyleGuidesDeleteStyleGuideData,
  StyleGuidesDeleteStyleGuideErrors,
  StyleGuidesDeleteStyleGuideResponses,
  StyleGuidesGetStyleGuideData,
  StyleGuidesGetStyleGuideErrors,
  StyleGuidesGetStyleGuideResponses,
  StyleGuidesListStyleGuidesData,
  StyleGuidesListStyleGuidesErrors,
  StyleGuidesListStyleGuidesResponses,
  StyleGuidesUpdateStyleGuideData,
  StyleGuidesUpdateStyleGuideErrors,
  StyleGuidesUpdateStyleGuideResponses,
  StyleRewritesCreateStyleRewriteData,
  StyleRewritesCreateStyleRewriteErrors,
  StyleRewritesCreateStyleRewriteResponses,
  StyleRewritesGetStyleRewriteData,
  StyleRewritesGetStyleRewriteErrors,
  StyleRewritesGetStyleRewriteResponses,
  StyleSuggestionsCreateStyleSuggestionData,
  StyleSuggestionsCreateStyleSuggestionErrors,
  StyleSuggestionsCreateStyleSuggestionResponses,
  StyleSuggestionsGetStyleSuggestionData,
  StyleSuggestionsGetStyleSuggestionErrors,
  StyleSuggestionsGetStyleSuggestionResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Admin Constants
 */
export const internalGetAdminConstants = <ThrowOnError extends boolean = false>(
  options?: Options<InternalGetAdminConstantsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalGetAdminConstantsResponses,
    InternalGetAdminConstantsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/internal/constants',
    ...options,
  });
};

/**
 * Submit Feedback
 */
export const internalSubmitFeedback = <ThrowOnError extends boolean = false>(
  options: Options<InternalSubmitFeedbackData, ThrowOnError>,
) => {
  return (options.client ?? client).post<InternalSubmitFeedbackResponses, InternalSubmitFeedbackErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/internal/demo-feedback',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Style Guides
 * Retrieve all style guides associated with your organization.
 */
export const styleGuidesListStyleGuides = <ThrowOnError extends boolean = false>(
  options?: Options<StyleGuidesListStyleGuidesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StyleGuidesListStyleGuidesResponses,
    StyleGuidesListStyleGuidesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style-guides',
    ...options,
  });
};

/**
 * Create Style Guide
 * Create a new style guide that can be used in checks, suggestions, and rewrites.
 */
export const styleGuidesCreateStyleGuide = <ThrowOnError extends boolean = false>(
  options: Options<StyleGuidesCreateStyleGuideData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    StyleGuidesCreateStyleGuideResponses,
    StyleGuidesCreateStyleGuideErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style-guides',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Delete Style Guide
 * Delete a style guide by ID.
 */
export const styleGuidesDeleteStyleGuide = <ThrowOnError extends boolean = false>(
  options: Options<StyleGuidesDeleteStyleGuideData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    StyleGuidesDeleteStyleGuideResponses,
    StyleGuidesDeleteStyleGuideErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style-guides/{style_guide_id}',
    ...options,
  });
};

/**
 * Get Style Guide
 * Retrieve a specific style guide by ID, including its metadata such as `name` and `status`.
 */
export const styleGuidesGetStyleGuide = <ThrowOnError extends boolean = false>(
  options: Options<StyleGuidesGetStyleGuideData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    StyleGuidesGetStyleGuideResponses,
    StyleGuidesGetStyleGuideErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style-guides/{style_guide_id}',
    ...options,
  });
};

/**
 * Update Style Guide
 * Update the name of an existing style guide.
 */
export const styleGuidesUpdateStyleGuide = <ThrowOnError extends boolean = false>(
  options: Options<StyleGuidesUpdateStyleGuideData, ThrowOnError>,
) => {
  return (options.client ?? client).patch<
    StyleGuidesUpdateStyleGuideResponses,
    StyleGuidesUpdateStyleGuideErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style-guides/{style_guide_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create Style Check
 * Analyze text for grammar, style, and clarity issues.
 */
export const styleChecksCreateStyleCheck = <ThrowOnError extends boolean = false>(
  options: Options<StyleChecksCreateStyleCheckData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    StyleChecksCreateStyleCheckResponses,
    StyleChecksCreateStyleCheckErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style/checks',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Get Style Check
 * Retrieve style check results.
 */
export const styleChecksGetStyleCheck = <ThrowOnError extends boolean = false>(
  options: Options<StyleChecksGetStyleCheckData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    StyleChecksGetStyleCheckResponses,
    StyleChecksGetStyleCheckErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style/checks/{workflow_id}',
    ...options,
  });
};

/**
 * Create Style Suggestion
 * Get suggested corrections for text.
 */
export const styleSuggestionsCreateStyleSuggestion = <ThrowOnError extends boolean = false>(
  options: Options<StyleSuggestionsCreateStyleSuggestionData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    StyleSuggestionsCreateStyleSuggestionResponses,
    StyleSuggestionsCreateStyleSuggestionErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style/suggestions',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Get Style Suggestion
 * Retrieve suggestion results.
 */
export const styleSuggestionsGetStyleSuggestion = <ThrowOnError extends boolean = false>(
  options: Options<StyleSuggestionsGetStyleSuggestionData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    StyleSuggestionsGetStyleSuggestionResponses,
    StyleSuggestionsGetStyleSuggestionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style/suggestions/{workflow_id}',
    ...options,
  });
};

/**
 * Create Style Rewrite
 * Rewrite text with style corrections applied.
 */
export const styleRewritesCreateStyleRewrite = <ThrowOnError extends boolean = false>(
  options: Options<StyleRewritesCreateStyleRewriteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    StyleRewritesCreateStyleRewriteResponses,
    StyleRewritesCreateStyleRewriteErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style/rewrites',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Get Style Rewrite
 * Retrieve rewrite results.
 */
export const styleRewritesGetStyleRewrite = <ThrowOnError extends boolean = false>(
  options: Options<StyleRewritesGetStyleRewriteData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    StyleRewritesGetStyleRewriteResponses,
    StyleRewritesGetStyleRewriteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/style/rewrites/{workflow_id}',
    ...options,
  });
};
