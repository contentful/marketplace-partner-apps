// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import {
  internalGetAdminConstants,
  internalSubmitFeedback,
  type Options,
  styleChecksCreateStyleCheck,
  styleChecksGetStyleCheck,
  styleGuidesCreateStyleGuide,
  styleGuidesDeleteStyleGuide,
  styleGuidesGetStyleGuide,
  styleGuidesListStyleGuides,
  styleGuidesUpdateStyleGuide,
  styleRewritesCreateStyleRewrite,
  styleRewritesGetStyleRewrite,
  styleSuggestionsCreateStyleSuggestion,
  styleSuggestionsGetStyleSuggestion,
} from '../sdk.gen';
import type {
  InternalGetAdminConstantsData,
  InternalSubmitFeedbackData,
  InternalSubmitFeedbackError,
  InternalSubmitFeedbackResponse,
  StyleChecksCreateStyleCheckData,
  StyleChecksCreateStyleCheckError,
  StyleChecksCreateStyleCheckResponse,
  StyleChecksGetStyleCheckData,
  StyleGuidesCreateStyleGuideData,
  StyleGuidesCreateStyleGuideError,
  StyleGuidesCreateStyleGuideResponse,
  StyleGuidesDeleteStyleGuideData,
  StyleGuidesDeleteStyleGuideError,
  StyleGuidesDeleteStyleGuideResponse,
  StyleGuidesGetStyleGuideData,
  StyleGuidesListStyleGuidesData,
  StyleGuidesUpdateStyleGuideData,
  StyleGuidesUpdateStyleGuideError,
  StyleGuidesUpdateStyleGuideResponse,
  StyleRewritesCreateStyleRewriteData,
  StyleRewritesCreateStyleRewriteError,
  StyleRewritesCreateStyleRewriteResponse,
  StyleRewritesGetStyleRewriteData,
  StyleSuggestionsCreateStyleSuggestionData,
  StyleSuggestionsCreateStyleSuggestionError,
  StyleSuggestionsCreateStyleSuggestionResponse,
  StyleSuggestionsGetStyleSuggestionData,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const internalGetAdminConstantsQueryKey = (options?: Options<InternalGetAdminConstantsData>) =>
  createQueryKey('internalGetAdminConstants', options);

/**
 * Get Admin Constants
 */
export const internalGetAdminConstantsOptions = (options?: Options<InternalGetAdminConstantsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await internalGetAdminConstants({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: internalGetAdminConstantsQueryKey(options),
  });
};

/**
 * Submit Feedback
 */
export const internalSubmitFeedbackMutation = (
  options?: Partial<Options<InternalSubmitFeedbackData>>,
): UseMutationOptions<
  InternalSubmitFeedbackResponse,
  InternalSubmitFeedbackError,
  Options<InternalSubmitFeedbackData>
> => {
  const mutationOptions: UseMutationOptions<
    InternalSubmitFeedbackResponse,
    InternalSubmitFeedbackError,
    Options<InternalSubmitFeedbackData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await internalSubmitFeedback({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const styleGuidesListStyleGuidesQueryKey = (options?: Options<StyleGuidesListStyleGuidesData>) =>
  createQueryKey('styleGuidesListStyleGuides', options);

/**
 * List Style Guides
 * Retrieve all style guides associated with your organization.
 */
export const styleGuidesListStyleGuidesOptions = (options?: Options<StyleGuidesListStyleGuidesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await styleGuidesListStyleGuides({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: styleGuidesListStyleGuidesQueryKey(options),
  });
};

/**
 * Create Style Guide
 * Create a new style guide that can be used in checks, suggestions, and rewrites.
 */
export const styleGuidesCreateStyleGuideMutation = (
  options?: Partial<Options<StyleGuidesCreateStyleGuideData>>,
): UseMutationOptions<
  StyleGuidesCreateStyleGuideResponse,
  StyleGuidesCreateStyleGuideError,
  Options<StyleGuidesCreateStyleGuideData>
> => {
  const mutationOptions: UseMutationOptions<
    StyleGuidesCreateStyleGuideResponse,
    StyleGuidesCreateStyleGuideError,
    Options<StyleGuidesCreateStyleGuideData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await styleGuidesCreateStyleGuide({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Style Guide
 * Delete a style guide by ID.
 */
export const styleGuidesDeleteStyleGuideMutation = (
  options?: Partial<Options<StyleGuidesDeleteStyleGuideData>>,
): UseMutationOptions<
  StyleGuidesDeleteStyleGuideResponse,
  StyleGuidesDeleteStyleGuideError,
  Options<StyleGuidesDeleteStyleGuideData>
> => {
  const mutationOptions: UseMutationOptions<
    StyleGuidesDeleteStyleGuideResponse,
    StyleGuidesDeleteStyleGuideError,
    Options<StyleGuidesDeleteStyleGuideData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await styleGuidesDeleteStyleGuide({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const styleGuidesGetStyleGuideQueryKey = (options: Options<StyleGuidesGetStyleGuideData>) =>
  createQueryKey('styleGuidesGetStyleGuide', options);

/**
 * Get Style Guide
 * Retrieve a specific style guide by ID, including its metadata such as `name` and `status`.
 */
export const styleGuidesGetStyleGuideOptions = (options: Options<StyleGuidesGetStyleGuideData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await styleGuidesGetStyleGuide({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: styleGuidesGetStyleGuideQueryKey(options),
  });
};

/**
 * Update Style Guide
 * Update the name of an existing style guide.
 */
export const styleGuidesUpdateStyleGuideMutation = (
  options?: Partial<Options<StyleGuidesUpdateStyleGuideData>>,
): UseMutationOptions<
  StyleGuidesUpdateStyleGuideResponse,
  StyleGuidesUpdateStyleGuideError,
  Options<StyleGuidesUpdateStyleGuideData>
> => {
  const mutationOptions: UseMutationOptions<
    StyleGuidesUpdateStyleGuideResponse,
    StyleGuidesUpdateStyleGuideError,
    Options<StyleGuidesUpdateStyleGuideData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await styleGuidesUpdateStyleGuide({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Create Style Check
 * Analyze text for grammar, style, and clarity issues.
 */
export const styleChecksCreateStyleCheckMutation = (
  options?: Partial<Options<StyleChecksCreateStyleCheckData>>,
): UseMutationOptions<
  StyleChecksCreateStyleCheckResponse,
  StyleChecksCreateStyleCheckError,
  Options<StyleChecksCreateStyleCheckData>
> => {
  const mutationOptions: UseMutationOptions<
    StyleChecksCreateStyleCheckResponse,
    StyleChecksCreateStyleCheckError,
    Options<StyleChecksCreateStyleCheckData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await styleChecksCreateStyleCheck({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const styleChecksGetStyleCheckQueryKey = (options: Options<StyleChecksGetStyleCheckData>) =>
  createQueryKey('styleChecksGetStyleCheck', options);

/**
 * Get Style Check
 * Retrieve style check results.
 */
export const styleChecksGetStyleCheckOptions = (options: Options<StyleChecksGetStyleCheckData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await styleChecksGetStyleCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: styleChecksGetStyleCheckQueryKey(options),
  });
};

/**
 * Create Style Suggestion
 * Get suggested corrections for text.
 */
export const styleSuggestionsCreateStyleSuggestionMutation = (
  options?: Partial<Options<StyleSuggestionsCreateStyleSuggestionData>>,
): UseMutationOptions<
  StyleSuggestionsCreateStyleSuggestionResponse,
  StyleSuggestionsCreateStyleSuggestionError,
  Options<StyleSuggestionsCreateStyleSuggestionData>
> => {
  const mutationOptions: UseMutationOptions<
    StyleSuggestionsCreateStyleSuggestionResponse,
    StyleSuggestionsCreateStyleSuggestionError,
    Options<StyleSuggestionsCreateStyleSuggestionData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await styleSuggestionsCreateStyleSuggestion({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const styleSuggestionsGetStyleSuggestionQueryKey = (options: Options<StyleSuggestionsGetStyleSuggestionData>) =>
  createQueryKey('styleSuggestionsGetStyleSuggestion', options);

/**
 * Get Style Suggestion
 * Retrieve suggestion results.
 */
export const styleSuggestionsGetStyleSuggestionOptions = (options: Options<StyleSuggestionsGetStyleSuggestionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await styleSuggestionsGetStyleSuggestion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: styleSuggestionsGetStyleSuggestionQueryKey(options),
  });
};

/**
 * Create Style Rewrite
 * Rewrite text with style corrections applied.
 */
export const styleRewritesCreateStyleRewriteMutation = (
  options?: Partial<Options<StyleRewritesCreateStyleRewriteData>>,
): UseMutationOptions<
  StyleRewritesCreateStyleRewriteResponse,
  StyleRewritesCreateStyleRewriteError,
  Options<StyleRewritesCreateStyleRewriteData>
> => {
  const mutationOptions: UseMutationOptions<
    StyleRewritesCreateStyleRewriteResponse,
    StyleRewritesCreateStyleRewriteError,
    Options<StyleRewritesCreateStyleRewriteData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await styleRewritesCreateStyleRewrite({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const styleRewritesGetStyleRewriteQueryKey = (options: Options<StyleRewritesGetStyleRewriteData>) =>
  createQueryKey('styleRewritesGetStyleRewrite', options);

/**
 * Get Style Rewrite
 * Retrieve rewrite results.
 */
export const styleRewritesGetStyleRewriteOptions = (options: Options<StyleRewritesGetStyleRewriteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await styleRewritesGetStyleRewrite({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: styleRewritesGetStyleRewriteQueryKey(options),
  });
};
