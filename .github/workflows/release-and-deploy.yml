---
"on":
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

name: Release and deploy apps
jobs:
  # Step 1: Check for apps that need releases
  # Creates release PRs and tags when conventional commits are detected
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          command: manifest
          token: ${{secrets.GITHUB_TOKEN}}
          default-branch: main
          release-type: node
    outputs:
      # Boolean: true if any releases were created
      releases_created: ${{ steps.release.outputs.releases_created }}
      # Comma-separated list of app paths that were released (e.g., "apps/bynder,apps/wix")
      paths_released: ${{ steps.release.outputs.paths_released }}

  # Step 2: Build and deploy only changed apps
  # This job has two paths based on whether releases were created:
  # - Production path: deploys released apps to production
  # - Staging path: deploys changed apps to staging for testing
  build-and-deploy:
    needs: release-please
    runs-on: ubuntu-latest
    env:
      # "production" deploy secrets
      DEFINITIONS_ORG_ID: ${{ secrets.DEFINITIONS_ORG_ID }}
      CONTENTFUL_CMA_TOKEN: ${{ secrets.CONTENTFUL_CMA_TOKEN }}

      # "staging" deploy secrets
      TEST_ORG_ID: ${{ secrets.TEST_ORG_ID }}
      TEST_CMA_TOKEN: ${{ secrets.TEST_CMA_TOKEN }}
    steps:
      # Checkout with full git history so Lerna can detect which apps have changed
      # This enables --since flags to work correctly for smart builds
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Node.js with npm caching enabled
      # The cache speeds up npm ci by reusing node_modules from previous runs
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Restore Nx build cache to skip rebuilding unchanged code
      # Nx caches build outputs (dist/build folders) based on file hashes
      # This can reduce build time from minutes to seconds for unchanged apps
      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: /tmp/nxcache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nx-${{ runner.os }}-

      # Install root-level dependencies (lerna, nx, etc.)
      # Required before we can run lerna commands
      - name: Install root-level project
        run: npm ci

      # PRODUCTION PATH: Only install/build apps that were actually released
      # This uses release-please's output to determine which apps need deployment
      # Significantly faster than installing/building all 33+ apps
      - name: Install released apps
        if: ${{ needs.release-please.outputs.releases_created }}
        run: |
          PATHS="${{ needs.release-please.outputs.paths_released }}"
          if [ -n "$PATHS" ]; then
            echo "Released paths: $PATHS"
            npx lerna run install-ci --scope="{$PATHS}" --concurrency=5
          fi

      - name: Build released apps
        if: ${{ needs.release-please.outputs.releases_created }}
        run: |
          PATHS="${{ needs.release-please.outputs.paths_released }}"
          if [ -n "$PATHS" ]; then
            # Nx cache will skip rebuilding if source files haven't changed
            npx lerna run build --scope="{$PATHS}" --concurrency=5
          fi

      # STAGING PATH: Install/build only apps that changed since last commit
      # Uses Lerna's --since flag to detect changes via git history
      # This path runs for non-release commits (e.g., dependabot PRs)
      - name: Install changed apps (staging)
        if: ${{ !needs.release-please.outputs.releases_created }}
        run: npm run install-apps  # Uses --since main

      - name: Build changed apps (staging)
        if: ${{ !needs.release-please.outputs.releases_created }}
        run: npm run build-apps  # Uses --since main

      # Deploy to staging environment (test deployments)
      # Only runs when no releases were created (non-release commits)
      - name: Deploy apps (staging)
        if: ${{ !needs.release-please.outputs.releases_created }}
        run: |
          npx lerna run deploy:staging --since HEAD~1 --concurrency=3

      # Deploy to production environment (live deployments)
      # Only runs when releases were created by release-please
      - name: Deploy apps (production)
        if: ${{ needs.release-please.outputs.releases_created }}
        run: |
          PATHS="${{ needs.release-please.outputs.paths_released }}"
          if [ -n "$PATHS" ]; then
            npx lerna run deploy --scope="{$PATHS}" --concurrency=3
          fi
